import com.location.dependencies.Versions

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$Versions.kotlin"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$Versions.navigation_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//这个block 表示为每个子module进行相关配置。
subprojects(){
    // def releaseTasks = project.getTasksByName("assembleRelease",false)
    def releaseTasks = project.getTasksByName("assembleRelease",false)
    copyApkFile(releaseTasks, project)
  
}


static def buildTimeDir() {
    return new Date().format('YYYY-MM-dd/', TimeZone.getTimeZone('GMT+08:00'))
}

def copyApkFile(Set<Task> tasks , Project project) {
    for (task in tasks) {
        def dir = project.getProjectDir().getAbsolutePath()
        println "task name = $task.name" 
        def file = new File(dir + "/build/outputs/apk")

        if(task.name == "assembleRelease"){
            println "assemble release dir = $dir"
    
            //在生成此apk之前，先将之前生成的apk删除
            if (file.exists()) {
                def var = delete(dir + "/build/outputs/apk")
                println "clear before create $var ,------------------"
            }
        }
        

        task.doLast {
            if (file.exists()) {
                def fromPath = rootProject.getRootDir().getAbsolutePath()  + "/prebuilt/" + project.getName() + "/" + buildTimeDir();
                def fromFile = new File(fromPath)
                if(!fromFile.exists()){
                    fromFile.mkdirs()
                      println "create fileDir dir = $fromPath"
                }
                //将生成的apk拷贝出来
                copy{ //copy是gradle中的project提供的方法，用于拷贝，里面有两个特定的属性
                    //from srcDir ， into desDir （当这个目录不存在的时候会尝试创建这个文件夹）
                    from dir + "/build/outputs/apk/release/"
                    include "**/*.apk"
                    include "**/*.json"
                    into fromPath
                    rename '(.+)-release-(.+)', '$1.apk'
                }
                println("copy apk to "+fromPath)
            }
        }
    }
}