import com.location.dependencies.AppConfig
import com.location.dependencies.Versions
import com.location.dependencies.Deps

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    //kotli navigation safe args
    id 'androidx.navigation.safeargs.kotlin'

}
apply from: "../common.gradle"

static def appName() {
    return "WanAndroid"
}

static def buildTime() {
    return new Date().format('YYYY-MM-dd', TimeZone.getTimeZone('GMT+08:00'))
}


android {


    defaultConfig {
        applicationId AppConfig.APPLICATION_ID
        versionCode AppConfig.version_code
        versionName AppConfig.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            Properties properties = new Properties()
            InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
            properties.load( inputStream )
            storeFile file("./src/main/keystore/wanandroid.jks")
            def key_keyAlias = properties.getProperty( 'keyAlias' )
            def key_keyPassword = properties.getProperty( 'keyPassword' )
            def key_storePassword = properties.getProperty( 'storePassword' )
            storePassword key_storePassword
            keyAlias key_keyAlias
            keyPassword key_keyPassword
        }
    }

    buildTypes {
        release {
            //开启 代码压缩 优化 混淆
            minifyEnabled true
            //开启资源优化
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${appName()}-${buildType.name}-v${defaultConfig.versionName}-${defaultConfig.versionCode}-${buildTime()}.apk"
                }
            }

            signingConfig signingConfigs.release
        }
        releaseTest{
            //开启 代码压缩 优化 混淆
            minifyEnabled true
            //开启资源优化
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${appName()}.apk"
                }
            }
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


}

dependencies {
    implementation project(":libs:base")
    implementation project(":libs:network")
    //fragment 扩展函数
    implementation Deps.fragment

    implementation Deps.constraintlayout
    //lifecycle-livedata scope
    implementation Deps.lifecycle_livedata
    //kapt优化lifecycle
    kapt Deps.lifecycle_common
    //viewmodle
    implementation Deps.viewModel
    implementation Deps.viewModelSaveState
    //lifecycle scope
    implementation Deps.lifecycleScop


//    implementation AndroidX.navigation.runtimeKtx
    implementation Deps.navigationFragment
    implementation Deps.navigationUI


    //moshi json解析 替代gson 在kotlin平台比gson好
    implementation Deps.moshi
    kapt Deps.moshiCode

    implementation Deps.DATA_STORE
    implementation Deps.PADING
    implementation Deps.GLIDE


    implementation Deps.COOKIE
    //x5 内核
    implementation Deps.webViewX5
    implementation Deps.OKHTTP_LOG

    kapt Deps.GLIDE_COMPILER
    debugImplementation Deps.LEAK_CANARY

    implementation Deps.retrofitRxJava2Adapter

//    implementation Deps.dagger
    implementation Deps.daggerAndroid
    implementation Deps.daggerAndroidSupport
    kapt Deps.daggerCompiler
    kapt Deps.daggerAndroidCompiler

    implementation Deps.room
    implementation Deps.roomKtx
    kapt Deps.roomCompiler




}